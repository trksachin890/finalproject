
//  * The Final Countdown for jQuery v2.1.0 (http://hilios.github.io/jQuery.countdown/)

// !function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){"use strict";function b(a){if(a instanceof Date)return a;if(String(a).match(g))return String(a).match(/^[0-9]*$/)&&(a=Number(a)),String(a).match(/\-/)&&(a=String(a).replace(/\-/g,"/")),new Date(a);throw new Error("Couldn't cast `"+a+"` to a date object.")}function c(a){var b=a.toString().replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1");return new RegExp(b)}function d(a){return function(b){var d=b.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);if(d)for(var f=0,g=d.length;g>f;++f){var h=d[f].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),j=c(h[0]),k=h[1]||"",l=h[3]||"",m=null;h=h[2],i.hasOwnProperty(h)&&(m=i[h],m=Number(a[m])),null!==m&&("!"===k&&(m=e(l,m)),""===k&&10>m&&(m="0"+m.toString()),b=b.replace(j,m.toString()))}return b=b.replace(/%%/,"%")}}function e(a,b){var c="s",d="";return a&&(a=a.replace(/(:|;|\s)/gi,"").split(/\,/),1===a.length?c=a[0]:(d=a[0],c=a[1])),1===Math.abs(b)?d:c}var f=[],g=[],h={precision:100,elapse:!1};g.push(/^[0-9]*$/.source),g.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),g.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),g=new RegExp(g.join("|"));var i={Y:"years",m:"months",n:"daysToMonth",w:"weeks",d:"daysToWeek",D:"totalDays",H:"hours",M:"minutes",S:"seconds"},j=function(b,c,d){this.el=b,this.$el=a(b),this.interval=null,this.offset={},this.options=a.extend({},h),this.instanceNumber=f.length,f.push(this),this.$el.data("countdown-instance",this.instanceNumber),d&&("function"==typeof d?(this.$el.on("update.countdown",d),this.$el.on("stoped.countdown",d),this.$el.on("finish.countdown",d)):this.options=a.extend({},h,d)),this.setFinalDate(c),this.start()};a.extend(j.prototype,{start:function(){null!==this.interval&&clearInterval(this.interval);var a=this;this.update(),this.interval=setInterval(function(){a.update.call(a)},this.options.precision)},stop:function(){clearInterval(this.interval),this.interval=null,this.dispatchEvent("stoped")},toggle:function(){this.interval?this.stop():this.start()},pause:function(){this.stop()},resume:function(){this.start()},remove:function(){this.stop.call(this),f[this.instanceNumber]=null,delete this.$el.data().countdownInstance},setFinalDate:function(a){this.finalDate=b(a)},update:function(){if(0===this.$el.closest("html").length)return void this.remove();var b,c=void 0!==a._data(this.el,"events"),d=new Date;b=this.finalDate.getTime()-d.getTime(),b=Math.ceil(b/1e3),b=!this.options.elapse&&0>b?0:Math.abs(b),this.totalSecsLeft!==b&&c&&(this.totalSecsLeft=b,this.elapsed=d>=this.finalDate,this.offset={seconds:this.totalSecsLeft%60,minutes:Math.floor(this.totalSecsLeft/60)%60,hours:Math.floor(this.totalSecsLeft/60/60)%24,days:Math.floor(this.totalSecsLeft/60/60/24)%7,daysToWeek:Math.floor(this.totalSecsLeft/60/60/24)%7,daysToMonth:Math.floor(this.totalSecsLeft/60/60/24%30.4368),totalDays:Math.floor(this.totalSecsLeft/60/60/24),weeks:Math.floor(this.totalSecsLeft/60/60/24/7),months:Math.floor(this.totalSecsLeft/60/60/24/30.4368),years:Math.abs(this.finalDate.getFullYear()-d.getFullYear())},this.options.elapse||0!==this.totalSecsLeft?this.dispatchEvent("update"):(this.stop(),this.dispatchEvent("finish")))},dispatchEvent:function(b){var c=a.Event(b+".countdown");c.finalDate=this.finalDate,c.elapsed=this.elapsed,c.offset=a.extend({},this.offset),c.strftime=d(this.offset),this.$el.trigger(c)}}),a.fn.countdown=function(){var b=Array.prototype.slice.call(arguments,0);return this.each(function(){var c=a(this).data("countdown-instance");if(void 0!==c){var d=f[c],e=b[0];j.prototype.hasOwnProperty(e)?d[e].apply(d,b.slice(1)):null===String(e).match(/^[$A-Z_][0-9A-Z_$]*$/i)?(d.setFinalDate.call(d,e),d.start()):a.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi,e))}else new j(this,b[0],b[1])})}});


(function ($) {
    "use strict";
  
    // Helper function to parse a date string
    function parseDate(input) {
      if (input instanceof Date) return input;
      if (String(input).match(validDateRegex)) {
        // Convert date string to a Date object
        return new Date(input.replace(/-/g, "/"));
      }
      throw new Error(`Couldn't cast "${input}" to a date object.`);
    }
  
    // Helper function to escape special characters in a string for use in regex
    function escapeRegex(input) {
      return input.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }
  
    // Format the output date string
    function formatString(offset) {
      return function (format) {
        const matches = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
        if (matches) {
          matches.forEach((match) => {
            const parts = match.match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/);
            const [fullMatch, modifier, letter, extra] = parts;
            const key = letter;
            if (dateFields.hasOwnProperty(key)) {
              let value = dateFields[key];
              value = Number(offset[value]);
              if (modifier === "!") {
                value = formatUnit(extra, value);
              }
              if (modifier === "" && value < 10) {
                value = "0" + value;
              }
              format = format.replace(escapeRegex(fullMatch), value.toString());
            }
          });
        }
        return format.replace(/%%/, "%");
      };
    }
  
    // Format a unit of time based on custom rule
    function formatUnit(pattern, value) {
      let format = "s";
      let prefix = "";
      if (pattern) {
        const parts = pattern.replace(/(:|;|\s)/g, "").split(",");
        if (parts.length === 1) format = parts[0];
        else {
          prefix = parts[0];
          format = parts[1];
        }
      }
      return value === 1 ? prefix : format;
    }
  
    // Regular expressions for valid date formats
    const validDateRegex = [
      /^[0-9]*$/, 
      /^(\d{1,2}\/){2}\d{4}( \d{1,2}(:\d{2}){2})?$/, 
      /^\d{4}([\/\-]\d{1,2}){2}( \d{1,2}(:\d{2}){2})?$/,
    ].join("|");
  
    const dateFields = {
      Y: "years", 
      m: "months", 
      n: "daysToMonth", 
      w: "weeks", 
      d: "daysToWeek", 
      D: "totalDays", 
      H: "hours", 
      M: "minutes", 
      S: "seconds"
    };
  
    let instances = [];
  
    // Countdown timer class
    function Countdown(element, finalDate, options) {
      this.element = element;
      this.$element = $(element);
      this.interval = null;
      this.offset = {};
      this.options = $.extend({}, defaultOptions, options);
      this.instanceNumber = instances.length;
      instances.push(this);
      this.$element.data("countdown-instance", this.instanceNumber);
  
      if (typeof finalDate === "function") {
        this.$element.on("update.countdown", finalDate);
        this.$element.on("stoped.countdown", finalDate);
        this.$element.on("finish.countdown", finalDate);
      } else {
        this.setFinalDate(finalDate);
        this.start();
      }
    }
  
    const defaultOptions = {
      precision: 100,
      elapse: false,
    };
  
    // Countdown methods
    $.extend(Countdown.prototype, {
      start: function () {
        if (this.interval) clearInterval(this.interval);
        this.update();
        this.interval = setInterval(() => this.update(), this.options.precision);
      },
  
      stop: function () {
        clearInterval(this.interval);
        this.interval = null;
        this.triggerEvent("stoped");
      },
  
      toggle: function () {
        this.interval ? this.stop() : this.start();
      },
  
      pause: function () {
        this.stop();
      },
  
      resume: function () {
        this.start();
      },
  
      remove: function () {
        this.stop();
        instances[this.instanceNumber] = null;
        delete this.$element.data().countdownInstance;
      },
  
      setFinalDate: function (date) {
        this.finalDate = parseDate(date);
      },
  
      update: function () {
        if (!this.$element.closest("html").length) return this.remove();
  
        const currentTime = new Date();
        let remainingTime = this.finalDate.getTime() - currentTime.getTime();
        remainingTime = Math.ceil(remainingTime / 1000);
        remainingTime = !this.options.elapse && remainingTime < 0 ? 0 : Math.abs(remainingTime);
  
        if (this.totalSecsLeft !== remainingTime) {
          this.totalSecsLeft = remainingTime;
          this.elapsed = currentTime >= this.finalDate;
          this.offset = {
            seconds: this.totalSecsLeft % 60,
            minutes: Math.floor(this.totalSecsLeft / 60) % 60,
            hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
            days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
            daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
            daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),
            totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
            weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
            months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
            years: Math.abs(this.finalDate.getFullYear() - currentTime.getFullYear()),
          };
  
          if (this.options.elapse || this.totalSecsLeft > 0) {
            this.triggerEvent("update");
          } else {
            this.stop();
            this.triggerEvent("finish");
          }
        }
      },
  
      triggerEvent: function (eventName) {
        const event = $.Event(`${eventName}.countdown`);
        event.finalDate = this.finalDate;
        event.elapsed = this.elapsed;
        event.offset = $.extend({}, this.offset);
        event.strftime = formatString(this.offset);
        this.$element.trigger(event);
      }
    });
  
    // Countdown jQuery plugin
    $.fn.countdown = function () {
      const args = Array.prototype.slice.call(arguments);
      return this.each(function () {
        const instanceNumber = $(this).data("countdown-instance");
        if (instanceNumber !== undefined) {
          const instance = instances[instanceNumber];
          const method = args[0];
          if (Countdown.prototype.hasOwnProperty(method)) {
            instance[method].apply(instance, args.slice(1));
          } else if (!/^[\w-]+$/.test(method)) {
            instance.setFinalDate(method);
            instance.start();
          } else {
            $.error(`Method ${method} does not exist on jQuery.countdown`);
          }
        } else {
          new Countdown(this, args[0], args[1]);
        }
      });
    };
  
  })(jQuery);
  